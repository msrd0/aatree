searchState.loadedDescShard("aatree", 0, "AA-Tree implementation in Rust.\nIterator implementations for <code>AATreeSet</code> and <code>AATreeMap</code>.\nLow-level implementation of an AA tree. You shouldn’t …\nThe iterator produces from an AATree-based data structure …\nThe iterator produces from an reference of an AATree-based …\nThis trait allows iterators to return elements other than …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nClears the map, removing all elements.\nCheck if a key is contained within this map.\nGets the given key’s corresponding entry, allowing for …\nGets the first entry (that is, with the smallest key) in …\nReturns a reference to the first entry (that is, with the …\nReturns a reference to the first entry with a key greater …\nReturns a mutable reference to the first entry with a key …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nReturns a reference to the key and value corresponding to …\nReturns a mutable reference to the value corresponding to …\nInsert a new element into the map, or overwrite an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator visiting all the keys, in …\nCreates a consuming iterator visiting all the values, in …\nReturns <code>true</code> if the map contains no elements.\nCreates an iterator over this map that visits all entries …\nCreates an iterator visiting all the keys, in sorted order.\nGets the last entry (that is, with the largest key) in the …\nReturns a reference to the last entry (that is, with the …\nReturns a reference to the last entry with a key smaller …\nReturns a mutable reference to the last entry with a key …\nReturns the number of elements in the map.\nConstruct a new, empty AA-Tree based map.\nReturns and removes the first entry (that is, with the …\nReturns and removes the last entry (that is, with the …\nRemove a key from the map if it exists, and return the …\nRemove a key from the map if it exists, and return the key …\nCreates an iterator visiting all the values, in sorted …\nThis type specifies the requested step for <code>traverse</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn true if this node has a left child.\nReturn true if this node has a right child.\nInsert a new node with <code>content</code> into the tree. If a node …\nInsert a new node with <code>content</code> into the tree. If a node …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if this node is a leaf.\nReturn true if this node is <code>Nil</code>.\nCreate a new <code>Nil</code> node.\nRemove a value from this tree. If the value was found, it …\nTraverse the tree looking for a specific value.\nA set based on an AA-Tree.\nMoves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …\nClears the set, removing all elements.\nReturns <code>true</code> if the set contains an element with the given …\nReturns the first/smallest element of the set.\nReturns the first/smallest element of the set that is …\nReturns the argument unchanged.\nAdds a value to the set.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the set contains no elements.\nCreates an iterator over this set that visits the values …\nReturns the last/largest element of the set.\nReturns the last/largest element of the set that is …\nReturns the number of elements in the set.\nConstruct a new, empty AA-Tree based set.\nRemove and return the first/smallest element of the set.\nRemove and return the last/largest element of the set.\nRemoves a value from the set, and returns <code>true</code> if it was …\nRemoves a value from the set, and returns the value that …")