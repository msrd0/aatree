var searchIndex = JSON.parse('{\
"aatree":{"doc":"AA-Tree implementation in Rust.","t":[3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["AATreeMap","AATreeMapEntry","AATreeSet","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","contains","contains_key","default","default","eq","eq","fmt","fmt","fmt","from","from","from","from_iter","from_iter","from_iter","get","get_mut","insert","insert","into","into","into","into_iter","into_iter","is_empty","is_empty","iter","iter","iter","largest","largest","largest_leq_than","largest_leq_than","len","len","new","new","node","partial_cmp","partial_cmp","smallest","smallest","smallest_geq_than","smallest_geq_than","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","AAIntoIter","AAIter","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","into","into","into_iter","into_iter","next","next","size_hint","size_hint","try_from","try_from","try_into","try_into","type_id","type_id","AANode","Left","Nil","Node","Right","TraverseStep","Value","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","default","eq","fmt","fmt","from","from","from","from","insert","into","into","ne","new","remove","to_owned","traverse","try_from","try_from","try_into","try_into","type_id","type_id","content","left_child","level","right_child"],"q":["aatree","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aatree::iter","","","","","","","","","","","","","","","","","","","","","","","","aatree::node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aatree::node::AANode","","",""],"d":["","","A set based on an AA-Tree.","","","","","","","","","","","","","","Returns <code>true</code> if the set contains an element with the …","","","","","","","","","","","","","","","Returns a reference to the value corresponding to the key.","Returns a mutable reference to the value corresponding to …","","Adds a value to the set.","","","","","","Returns <code>true</code> if the map contains no elements.","Returns <code>true</code> if the set contains no elements.","","Creates an iterator over this map that visits all entries …","Creates an iterator over this set that visits the values …","","Returns the largest element of the set.","","Returns the largest element of the set that is smaller or …","Returns the number of elements in the map.","Returns the number of elements in the set.","Construct a new, empty AA-Tree based map.","Construct a new, empty AA-Tree based set.","","","","","Returns the smallest element of the set.","","Returns the smallest element of the set that is greater …","","","","","","","","","","","","","The iterator produces from an AATree-based data structure …","The iterator produces from an reference of an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","This type specifies the requested step for <code>traverse</code>.","","","","","","","","","","","","","","","","Insert a new node with <code>content</code> into the tree. If a node …","","","","","Remove a value from this tree. If the value was found, it …","","Traverse the tree looking for a specific value. The …","","","","","","","","","",""],"i":[0,0,0,1,2,3,1,2,3,1,2,3,1,2,3,1,3,2,2,3,1,1,1,2,3,1,2,3,2,2,3,2,2,2,3,1,2,3,2,3,2,3,0,2,3,2,3,2,3,2,3,2,3,0,1,1,2,3,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,0,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,4,5,0,6,7,7,6,0,6,6,7,6,7,7,7,7,7,6,7,6,7,7,7,7,6,7,7,7,7,7,7,6,7,6,7,6,7,8,8,8,8],"f":[null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["aatreemapentry",3]],[[],["aatreemap",3]],[[],["aatreeset",3]],[[]],[[]],[[]],[[],["ordering",4]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["aaintoiter",3]],[[],["bool",15]],[[],["bool",15]],null,[[],[["aaiter",3],["aatreemapentry",3]]],[[],["aaiter",3]],[[],[["option",4],["aatreemapentry",3]]],[[],["option",4]],[[],[["option",4],["aatreemapentry",3]]],[[],["option",4]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],null,[[],[["ordering",4],["option",4]]],[[],[["ordering",4],["option",4]]],[[],[["option",4],["aatreemapentry",3]]],[[],["option",4]],[[],[["option",4],["aatreemapentry",3]]],[[],["option",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["aanode",4]],[[]],[[]],[[["aanode",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[]],[[]],[[["aanode",4]],["bool",15]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null],"p":[[3,"AATreeMapEntry"],[3,"AATreeMap"],[3,"AATreeSet"],[3,"AAIter"],[3,"AAIntoIter"],[4,"TraverseStep"],[4,"AANode"],[13,"Node"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};