var searchIndex = JSON.parse('{\
"aatree":{"doc":"AA-Tree implementation in Rust.","t":[2,2,0,0,0,0,3,3,8,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,4,13,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,3,13,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AATreeMap","AATreeSet","iter","map","node","set","AAIntoIter","AAIter","IterContent","borrow","borrow","borrow_mut","borrow_mut","content","content","content","from","from","into","into","into_iter","into_iter","next","next","size_hint","size_hint","try_from","try_from","try_into","try_into","type_id","type_id","AATreeMap","Entry","Occupied","OccupiedEntry","Vacant","VacantEntry","and_modify","append","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clone","clone_into","cmp","contains_key","content","content","content","content","default","deserialize","entry","eq","equivalent","extend","extend","first_entry","first_key_value","first_key_value_at_or_after","first_key_value_mut_at_or_after","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_iter","get","get","get_key_value","get_mut","get_mut","insert","insert","insert","into","into","into","into","into_iter","into_iter","into_key","into_keys","into_mut","into_values","is_empty","iter","key","key","key","keys","last_entry","last_key_value","last_key_value_at_or_before","last_key_value_mut_at_or_before","len","new","or_default","or_insert","or_insert_with","or_insert_with_key","partial_cmp","pop_first","pop_largest","pop_last","remove","remove_entry","serialize","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","values","visit_type","0","0","AANode","Left","Right","TraverseStep","Value","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","content","content","default","eq","fmt","fmt","from","from","from","from","has_left_child","has_right_child","insert","insert_or_replace","into","into","is_leaf","is_nil","new","remove","to_owned","traverse","try_from","try_from","try_into","try_into","type_id","type_id","0","AATreeSet","append","borrow","borrow_mut","clear","clone","clone_into","cmp","contains","content","default","deserialize","eq","equivalent","extend","extend","first","first_at_or_after","fmt","from","from","from","from_iter","insert","into","into_iter","into_iter","is_empty","iter","last","last_at_or_before","len","new","partial_cmp","pop_first","pop_last","remove","serialize","take","to_owned","try_from","try_into","type_id","visit_type"],"q":["aatree","","","","","","aatree::iter","","","","","","","","","","","","","","","","","","","","","","","","","","aatree::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aatree::map::Entry","","aatree::node","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aatree::node::TraverseStep","aatree::set","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Iterator implementations for <code>AATreeSet</code> and <code>AATreeMap</code>.","","Low-level implementation of an AA tree. You shouldn’t …","","The iterator produces from an AATree-based data structure …","The iterator produces from an reference of an AATree-based …","This trait allows iterators to return elements other than …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Moves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …","","","","","","","","","Clears the map, removing all elements.","","","","Check if a key is contained within this map.","","","","","","","Gets the given key’s corresponding entry, allowing for …","","","","","Gets the first entry (that is, with the smallest key) in …","Returns a reference to the first entry (that is, with the …","Returns a reference to the first entry with a key greater …","Returns a mutable reference to the first entry with a key …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns a reference to the value corresponding to the key.","Returns a reference to the key and value corresponding to …","","Returns a mutable reference to the value corresponding to …","","","Insert a new element into the map, or overwrite an …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Creates a consuming iterator visiting all the keys, in …","","Creates a consuming iterator visiting all the values, in …","Returns <code>true</code> if the map contains no elements.","Creates an iterator over this map that visits all entries …","","","","Creates an iterator visiting all the keys, in sorted order.","Gets the last entry (that is, with the largest key) in the …","Returns a reference to the last entry (that is, with the …","Returns a reference to the last entry with a key smaller …","Returns a mutable reference to the last entry with a key …","Returns the number of elements in the map.","Construct a new, empty AA-Tree based map.","","","","","","Returns and removes the first entry (that is, with the …","","Returns and removes the last entry (that is, with the …","Remove a key from the map if it exists, and return the …","Remove a key from the map if it exists, and return the key …","","","","","","","","","","","","","","","Creates an iterator visiting all the values, in sorted …","","","","","","","This type specifies the requested step for <code>traverse</code>.","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Return true if this node has a left child.","Return true if this node has a right child.","Insert a new node with <code>content</code> into the tree. If a node …","Insert a new node with <code>content</code> into the tree. If a node …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return true if this node is a leaf.","Return true if this node is <code>Nil</code>.","Create a new <code>Nil</code> node.","Remove a value from this tree. If the value was found, it …","","Traverse the tree looking for a specific value.","","","","","","","","A set based on an AA-Tree.","Moves all elements from <code>other</code> into <code>self</code>, leaving <code>other</code> …","","","Clears the set, removing all elements.","","","","Returns <code>true</code> if the set contains an element with the given …","","","","","","","","Returns the first/smallest element of the set.","Returns the first/smallest element of the set that is …","","Returns the argument unchanged.","","","","Adds a value to the set.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if the set contains no elements.","Creates an iterator over this set that visits the values …","Returns the last/largest element of the set.","Returns the last/largest element of the set that is …","Returns the number of elements in the set.","Construct a new, empty AA-Tree based set.","","Remove and return the first/smallest element of the set.","Remove and return the last/largest element of the set.","Removes a value from the set, and returns <code>true</code> if it was …","","Removes a value from the set, and returns the value that …","","","","",""],"i":[0,0,0,0,0,0,0,0,0,1,3,1,3,28,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,0,0,6,0,6,0,6,7,6,15,19,7,6,15,19,7,7,7,7,7,7,6,15,19,7,7,7,7,7,7,7,7,7,7,7,7,6,15,19,7,6,15,19,7,7,7,7,15,7,7,15,7,15,19,7,6,15,19,7,7,7,19,7,15,7,7,7,6,15,19,7,7,7,7,7,7,7,6,6,6,6,7,7,7,7,7,7,7,7,6,15,19,7,6,15,19,7,6,15,19,7,7,7,29,30,0,25,25,0,25,25,24,25,24,24,24,25,24,24,24,25,24,25,24,24,24,24,24,24,24,25,24,24,24,24,24,24,24,25,24,25,24,25,24,31,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,2],[3,2],[1],[3],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],0,0,0,0,0,0,[6,6],[[7,7]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7],[[[7,[8,8]]],[[7,[8,8]]]],[[]],[[[7,[9,9]],[7,[9,9]]],10],[7,11],[[]],[[]],[[]],[[]],[[],7],[[],[[4,[7]]]],[7,6],[[[7,[12,12]],[7,[12,12]]],11],[[],11],[[[7,[[0,[9,13]],[0,[9,13]]]],14]],[[[7,[9]],14]],[7,[[2,[15]]]],[7,2],[7,2],[7,2],[[[6,[16,16]],17],18],[[[15,[16,16]],17],18],[[[19,[16,16]],17],18],[[[7,[16,16]],17],18],[[]],[[]],[[]],[20,[[7,[9]]]],[[],[[7,[9]]]],[[]],[[],[[7,[9]]]],[15],[7,2],[7,2],[15],[7,2],[15],[19],[7,2],[[]],[[]],[[]],[[]],[7],[7],[19],[7,21],[15],[7,21],[7,11],[7,[[1,[0]]]],[6],[15],[19],[7,21],[7,[[2,[15]]]],[7,2],[7,2],[7,2],[7,22],[[],7],[6],[6],[6],[6],[[[7,[23,23]],[7,[23,23]]],[[2,[10]]]],[7,2],[7,2],[7,2],[7,2],[7,2],[7,4],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],[[],5],[[],5],[7,21],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[24,[8]]],[[24,[8]]]],[[]],[[]],[[]],[[],24],[[[24,[12]],24],11],[[[25,[16]],17],18],[[[24,[16]],17],18],[[]],[[],24],[26],[[]],[24,11],[24,11],[[[24,[9]],9],11],[[[24,[9]],9],[[2,[9]]]],[[]],[[]],[24,11],[24,11],[[],24],[24,2],[[]],[24,2],[[],4],[[],4],[[],4],[[],4],[[],5],[[],5],0,0,[[[27,[9]],[27,[9]]]],[[]],[[]],[27],[[[27,[8]]],[[27,[8]]]],[[]],[[[27,[9]],[27,[9]]],10],[[[27,[9]]],11],[[]],[[],27],[[],[[4,[27]]]],[[[27,[12]],[27,[12]]],11],[[],11],[[[27,[9]],14]],[[[27,[[0,[9,13]]]],14]],[[[27,[9]]],2],[[[27,[9]]],2],[[[27,[16]],17],18],[[]],[[],[[27,[9]]]],[[[20,[9]]],[[27,[9]]]],[[],[[27,[9]]]],[[[27,[9]],9],11],[[]],[27],[27],[27,11],[27,1],[[[27,[9]]],2],[[[27,[9]]],2],[27,22],[[],27],[[[27,[23]],[27,[23]]],[[2,[10]]]],[[[27,[9]]],[[2,[9]]]],[[[27,[9]]],[[2,[9]]]],[[[27,[9]]],11],[27,4],[[[27,[9]]],[[2,[9]]]],[[]],[[],4],[[],4],[[],5],[[]]],"p":[[3,"AAIter"],[4,"Option"],[3,"AAIntoIter"],[4,"Result"],[3,"TypeId"],[4,"Entry"],[3,"AATreeMap"],[8,"Clone"],[8,"Ord"],[4,"Ordering"],[15,"bool"],[8,"PartialEq"],[8,"Copy"],[8,"IntoIterator"],[3,"OccupiedEntry"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"VacantEntry"],[3,"Vec"],[8,"Iterator"],[15,"usize"],[8,"PartialOrd"],[3,"AANode"],[4,"TraverseStep"],[15,"never"],[3,"AATreeSet"],[8,"IterContent"],[13,"Vacant"],[13,"Occupied"],[13,"Value"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
